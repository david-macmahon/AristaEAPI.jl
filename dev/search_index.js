var documenterSearchIndex = {"docs":
[{"location":"#AristaEAPI.jl-Documentation","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"","category":"page"},{"location":"#High-level-interface","page":"AristaEAPI.jl Documentation","title":"High level interface","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"The high level interface consists of functions and structures that make it easy and convenient to query the switch for statistics and status information and work with the returned data.","category":"page"},{"location":"#Functions","page":"AristaEAPI.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"The high level interface provides query functions and predicate functions. Query functions communicate with the switch to get statistics and status information.  Predicate functions can be used with functions that take a predicate function, such as filter, findall, etc.","category":"page"},{"location":"#Query-functions","page":"AristaEAPI.jl Documentation","title":"Query functions","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"These function return the results as a Vector of structures.  Each functions has a corresponding structure defined for it.  The returned Vectors are compatible with Tables.jl, so they can be used with any Table.jl consumer, such as PrettyTables.jl When used with PrettyTables, pretty_table methods are defined to alter some default keyword argument values to display all entries and provide more tailored alignment (as shown in the example below).","category":"page"},{"location":"#AristaEAPI.interfaces_counters_rates","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.interfaces_counters_rates","text":"interfaces_counters_rates(host[, interfaces]; username, password, protocol)\n\nReturn Vector{InterfacesCountersRates} of interface counter rates from host.\n\ninterfaces may be given as a comma separated string of interfaces or a Vector of interfaces to be queried.  If not given, all interfaces will be queried.\n\nusername and password default to admin.  protocol defaults to https, but may be given as http instead.\n\n\n\n\n\n","category":"function"},{"location":"#AristaEAPI.interfaces_transceiver","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.interfaces_transceiver","text":"interfaces_transceiver(host[, interfaces]; username, password, protocol)\n\nReturn NamedTuple of interface transceiver status from host.\n\ninterfaces may be given as a comma separated string of interfaces or a Vector of interfaces to be queried.  If not given, all interfaces will be queried.\n\nusername and password default to admin.  protocol defaults to https, but may be given as http instead.\n\n\n\n\n\n","category":"function"},{"location":"#AristaEAPI.lldp_neighbors","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.lldp_neighbors","text":"lldp_neighbors(host[, interfaces]; username, password, protocol)\n\nReturn Vector{LLDPNeighbors} of LLDP neighbors of host.\n\ninterfaces may be given as a comma separated string of interfaces or a Vector of interfaces to be queried.  If not given, all interfaces will be queried.\n\nusername and password default to admin.  protocol defaults to https, but may be given as http instead.\n\n\n\n\n\n","category":"function"},{"location":"#AristaEAPI.mac_address_table","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.mac_address_table","text":"mac_address_table(host[, interfaces]; address, username, password, protocol)\n\nReturn Vector{MACAddressRecord} of the unitcast MAC address table of host.\n\ninterfaces may be given as a comma separated string of interfaces or a Vector of interfaces to be queried.  If not given, all interfaces will be queried. Optionally, a MAC address may be passed as address to query for a specific MAC address.\n\nusername and password default to admin.  protocol defaults to https, but may be given as http instead.\n\n\n\n\n\n","category":"function"},{"location":"#Example","page":"AristaEAPI.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"julia> interfaces_counters_rates(\"myswitch\", \"et4/1-et5/4\")|>pretty_table\n┌─────────────┬─────────────┬──────────┬────────────────┬──────────────┬──────────────┬─────────┬─────────────┬──────────┐\n│ port        │ description │ interval │         in_bps │      in_util │       in_pps │ out_bps │    out_util │  out_pps │\n├─────────────┼─────────────┼──────────┼────────────────┼──────────────┼──────────────┼─────────┼─────────────┼──────────┤\n│ Ethernet4/1 │             │      300 │    9.10519e9   │ 91.4426      │  2.44134e5   │ 21967.1 │ 0.000232733 │  8.16335 │\n│ Ethernet4/2 │             │      300 │    9.1052e9    │ 91.4426      │  2.44134e5   │ 21947.4 │ 0.000232518 │  8.1528  │\n│ Ethernet4/3 │             │      300 │    9.10519e9   │ 91.4426      │  2.44134e5   │ 21944.4 │ 0.000232479 │  8.14663 │\n│ Ethernet4/4 │             │      300 │    9.1052e9    │ 91.4426      │  2.44134e5   │ 21944.6 │ 0.000232483 │  8.1481  │\n│ Ethernet5/1 │             │      300 │    5.03642e-17 │  5.31133e-25 │  1.71821e-20 │ 21686.8 │ 0.000229122 │  7.65873 │\n│ Ethernet5/2 │             │      300 │    9.1052e9    │ 91.4426      │  2.44134e5   │ 21955.6 │ 0.000232627 │  8.16933 │\n│ Ethernet5/3 │             │      300 │ 5682.48        │  7.307e-5    │ 10.1532      │ 32662.7 │ 0.000370916 │ 27.6806  │\n│ Ethernet5/4 │             │      300 │    9.1052e9    │ 91.4426      │  2.44134e5   │ 21943.1 │ 0.000232465 │  8.14637 │\n└─────────────┴─────────────┴──────────┴────────────────┴──────────────┴──────────────┴─────────┴─────────────┴──────────┘","category":"page"},{"location":"#Predicate-functions","page":"AristaEAPI.jl Documentation","title":"Predicate functions","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"These predicate functions are intended for use with filter, findall, etc.","category":"page"},{"location":"#AristaEAPI.isdynamic","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.isdynamic","text":"isdynamic(mac::MACAddressRecord) -> Bool\n\nPredicate function that returns mac.type == \"dynamic\n\n\n\n\n\n","category":"function"},{"location":"#AristaEAPI.isstatic","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.isstatic","text":"isstatic(mac::MACAddressRecord) -> Bool\n\nPredicate function that returns mac.type == \"static\n\n\n\n\n\n","category":"function"},{"location":"#Structures","page":"AristaEAPI.jl Documentation","title":"Structures","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"The structures defined by AristaEAPI.jl are documented here.","category":"page"},{"location":"#AristaEAPI.InterfacesCountersRates","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.InterfacesCountersRates","text":"struct InterfacesCountersRates <: AbstractAristaEAPIStruct\n    port::String\n    description::Union{String, Missing}\n    interval::Union{Int, Missing}\n    in_bps::Union{Float64, Missing}\n    in_util::Union{Float64, Missing}\n    in_pps::Union{Float64, Missing}\n    out_bps::Union{Float64, Missing}\n    out_util::Union{Float64, Missing}\n    out_pps::Union{Float64, Missing}\nend\n\nStructure of interface rates returned by interfaces_counters_rates.\n\nFields\n\nName Description\nport Interface name\ndescription Interface description\ninterval Averagine interval\nin_bps Inbound bits per second\nin_util Inbound utilization percentage\nin_pps Inbound packets per second\nout_bps Outbound bits per second\nout_util Outbound utilization percentage\nout_pps Outbound packets per second\n\n\n\n\n\n","category":"type"},{"location":"#AristaEAPI.InterfacesTransceiver","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.InterfacesTransceiver","text":"struct InterfacesTransceiver <: AbstractAristaEAPIStruct\n    port::String\n    temperature::Union{Float64, Missing}\n    voltage::Union{Float64, Missing}\n    bias_current::Union{Float64, Missing}\n    tx_power::Union{Float64, Missing}\n    rx_power::Union{Float64, Missing}\n    last_update::Union{Float64, Missing}\n    media_type::Union{String, Missing}\n    vendor_sn::Union{String, Missing}\n    narrowband::Union{Bool, Missing}\nend\n\nStructure of transceiver status info returned by interfaces_transceiver.\n\nFields\n\nName Description\nport Interface name\ntemperature Transceiver temperature (C)\nvoltage Transceiver voltage (V)\nbias_current Transceiver bias current (mA)\ntx_power Optical transmit power (dBm)\nrx_power Optical receive power (dBm)\nlast_update Last update time (UNiX seconds)\nmedia_type Media type (e.g. 40GBASE-SR4)\nvendor_sn Transceiver serial number\nnarrowband Narrowband transceiver\n\n\n\n\n\n","category":"type"},{"location":"#AristaEAPI.LLDPNeighbors","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.LLDPNeighbors","text":"struct LLDPNeighbors <: AbstractAristaEAPIStruct\n    port::Union{String, Missing}\n    neighbor_device::Union{String, Missing}\n    neighbor_port::Union{String, Missing}\n    ttl::Union{Int, Missing}\nend\n\nStructure of LLDP neighbor info returned by lldp_neighbors.\n\nFields\n\nName Description\nport Interface name\nneighbor_device Neighbor name\nneighbor_port Neighbor interface\nttl Time to live\n\n\n\n\n\n","category":"type"},{"location":"#AristaEAPI.MACAddressRecord","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.MACAddressRecord","text":"struct MACAddressRecord <: AbstractAristaEAPIStruct\n    vlan::Union{Int, Missing}\n    mac_address::Union{String, Missing}\n    type::Union{String, Missing}\n    port::Union{String, Missing}\n    moves::Union{Int, Missing}\n    last_move::Union{Float64, Missing}\nend\n\nStructure of MAC address info returned by mac_address_table.\n\nFields\n\nName Description\nvlan VLAN ID\nmac_address MAC address\ntype Indicates learned (\"dynamic\") or configured (\"static\")\nport Interface name\nmoves Number of times the MAC address has changed ports\nlast_move Last time the MAC address changed ports (UNIX seconds)\n\n\n\n\n\n","category":"type"},{"location":"#Low-level-interface","page":"AristaEAPI.jl Documentation","title":"Low level interface","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"These functions are used by the high level functions to run commands on the switch using the Arista EAPI.  They can be used to run any commands that your switch supports over EAPI.  This function returns a JSON3.Object that can be used as a Dict{Symbol, Any}.  This object represents the JSON RPC response from the switch.  The results of interest can be obtained from this object via the :result key.","category":"page"},{"location":"#AristaEAPI.run_command","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.run_command","text":"run_command(host, cmd::AbstractString; username, password, protocol)\n\nRun Arista command cmd on host using Arista EAPI.\n\nusername and password default to admin.  protocol defaults to https, but may be given as http instead.\n\n\n\n\n\n","category":"function"},{"location":"#AristaEAPI.run_commands","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.run_commands","text":"run_commands(host, cmds::AbstractVector; username, password, protocol)\n\nRun Arista commands cmds on host using Arista EAPI.\n\nusername and password default to admin.  protocol defaults to https, but may be given as http instead.\n\n\n\n\n\n","category":"function"},{"location":"#Example-2","page":"AristaEAPI.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"julia> reply = run_command(\"arista1g\", \"show version\")\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 3 entries:\n  :jsonrpc => \"2.0\"\n  :result  => Object[{…\n  :id      => \"AristaEAPI.jl-yA6T96mC\"\n\njulia> reply[:result]\n1-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}:\n {\n          \"modelName\": \"DCS-7048T-A-R\",\n    \"internalVersion\": \"4.15.7M-3284043.4157M\",\n   \"systemMacAddress\": \"00:1c:73:a0:b8:df\",\n       \"serialNumber\": \"JPE14471431\",\n           \"memTotal\": 3978148,\n    \"bootupTimestamp\": 1.75581673972e9,\n            \"memFree\": 770812,\n            \"version\": \"4.15.7M\",\n       \"architecture\": \"i386\",\n      \"isIntlVersion\": false,\n    \"internalBuildId\": \"b0b0dff8-c9ca-40cc-a625-7fd3c8c76ebd\",\n   \"hardwareRevision\": \"01.07\"\n}","category":"page"},{"location":"#Index","page":"AristaEAPI.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"AristaEAPI.jl Documentation","title":"AristaEAPI.jl Documentation","text":"","category":"page"}]
}
